name: "CI Workflow"

on:
  push:
    branches:
      - staging
      - production
  pull_request:
    branches:
      - staging

jobs:
  migration-check:
    name: "Check Prisma Migrations"
    runs-on: ubuntu-latest
    services:
      db:
        image: postgres:latest
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: mydatabase
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          
      - name: Install Dependencies
        run: npm install
        
      - name: Reset Database to Staging State
        env:
          DATABASE_URL: postgresql://postgres:password@db:5432/mydatabase
        run: npx prisma migrate reset --force --skip-seed
        
      - name: Deploy Migrations from Feature Branch
        env:
          DATABASE_URL: postgresql://postgres:password@db:5432/mydatabase
        run: npx prisma migrate deploy
        
      - name: Check for Migration Drift
        env:
          DATABASE_URL: postgresql://postgres:password@db:5432/mydatabase
        run: |
          npx prisma migrate dev --name migration-check
          if [ -n "$(git status --porcelain)" ]; then
            echo "Migrations are out of sync with the schema."
            exit 1
          fi

  build:
    name: "Build Docker Container"
    runs-on: ubuntu-latest
    needs: migration-check
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and Export
        uses: docker/build-push-action@v5
        with:
          context: .
          tags: cyf/good-pr
          outputs: type=docker,dest=/tmp/good-pr-image.tar

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: good-pr-image
          path: /tmp/good-pr-image.tar

  deploy-staging:
    name: "Deploy container to staging environment"
    needs: [build, migration-check]
    if: github.event_name == 'push' && github.ref == 'refs/heads/staging'
    uses: "./.github/workflows/deployment.yml"
    with:
      artifact: "good-pr-image"
      container: "good-pr"
      deployment: "good-pr"
      environment: "staging"
      namespace: "staging"
      repository: "good-pr-staging"
      tag: "cyf/good-pr"
      url: "https://goodpr.staging.codeyourfuture.io/"
    secrets:
      # environment level
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      # organization level
      GPG_KEY: ${{ secrets.STAGING_GPG_KEY }}
      K8S_MASTER_PORT: ${{ secrets.AWS_K8S_MASTER_PORT }}
      K8S_SECURITY_GROUP: ${{ secrets.AWS_K8S_MASTER_SG }}
      S3_URI: ${{ secrets.STAGING_S3_CONFIG_URI }}

  deploy-production:
    name: "Deploy container to production environment"
    needs: [build, migration-check]
    if: github.event_name == 'push' && github.ref == 'refs/heads/production'
    uses: "./.github/workflows/deployment.yml"
    with:
      artifact: "good-pr-image"
      container: "good-pr"
      deployment: "good-pr"
      environment: "production"
      namespace: "default"
      repository: "good-pr-production"
      tag: "cyf/good-pr"
      url: "https://goodpr.codeyourfuture.io/"
    secrets:
      # environment level
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      # organization level
      GPG_KEY: ${{ secrets.PRODUCTION_GPG_KEY }}
      K8S_MASTER_PORT: ${{ secrets.AWS_K8S_MASTER_PORT }}
      K8S_SECURITY_GROUP: ${{ secrets.AWS_K8S_MASTER_SG }}
      S3_URI: ${{ secrets.PRODUCTION_S3_CONFIG_URI }}
